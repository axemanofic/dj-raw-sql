name: Build and deploy package

on:
  push:
    branches:
      - master
jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install caching
        uses: actions/cache@v2
        with:
          key: ${{ github.ref }}
          path: .cache
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.3
      - name: Install dependencies
        run: poetry install --without docs,dev
      - name: Run tests
        run: poetry run pytest ./tests/test_execute_sql.py
  deploy_docs:
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - name: Checkout master
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install caching
        uses: actions/cache@v2
        with:
          key: ${{ github.ref }}
          path: .cache
      - name: Install mkdocs
        run: pip install mkdocs-material
      - name: Deploy documentation
        run: mkdocs gh-deploy --force
  build_and_deploy_pypi:
    runs-on: ubuntu-latest
    needs: deploy_docs
    steps:
      - name: Checkout master
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install caching
        uses: actions/cache@v2
        with:
          key: ${{ github.ref }}
          path: .cache
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.3
      - name: Install dependencies
        run: poetry install --without dev,test,doc
      - name: Build project
        run: poetry build
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: steps.check-version.outputs.prerelease == 'true'
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
